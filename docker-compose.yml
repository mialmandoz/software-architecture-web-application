services:
  db:
    container_name: web_application_db
    image: postgres:14
    environment:
      POSTGRES_DB: web_application_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    container_name: web_application_redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    profiles:
      - cache

  opensearch:
    container_name: web_application_opensearch
    image: opensearchproject/opensearch:2.11.0
    environment:
      - discovery.type=single-node
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=OpenSearch123!
      - DISABLE_SECURITY_PLUGIN=true
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    profiles:
      - search

  web:
    container_name: web_application_app
    build: .
    ports:
      - "4000:4000"
    environment:
      - MIX_ENV=dev
      - DB_HOST=db
    depends_on:
      - db
    volumes:
      - .:/app
      - /app/deps
      - /app/_build
    profiles:
      - normal

  web_with_cache:
    container_name: web_application_app_cache
    build: .
    ports:
      - "4000:4000"
    environment:
      - MIX_ENV=dev
      - DB_HOST=db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - db
      - redis
    volumes:
      - .:/app
      - /app/deps
      - /app/_build
    profiles:
      - cache

  web_with_search:
    container_name: web_application_app_search
    build: .
    ports:
      - "4000:4000"
    environment:
      - MIX_ENV=dev
      - DB_HOST=db
      - OPENSEARCH_HOST=opensearch
      - OPENSEARCH_PORT=9200
    depends_on:
      - db
      - opensearch
    volumes:
      - .:/app
      - /app/deps
      - /app/_build
    profiles:
      - search

  # --- App con Cache + Search (para el modo "ALL") ---
  web_with_cache_search:
    container_name: web_application_app_cache_search
    build: .
    ports:
      - "4000:4000"
    environment:
      - MIX_ENV=dev
      - DB_HOST=db
      # Search
      - OPENSEARCH_HOST=opensearch
      - OPENSEARCH_PORT=9200
      # Cache
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - db
      - opensearch
      - redis
    volumes:
      - .:/app
      - /app/deps
      - /app/_build
    profiles:
      - cache
      - search

  # --- Reverse Proxy (modo: App + DB + Proxy) ---
  nginx_app:
    image: nginx:alpine
    container_name: web_application_nginx_app
    environment:
      # En “all” servimos la app que usa cache + search
      UPSTREAM: web:4000
    volumes:
      - ./nginx/templates:/etc/nginx/templates:ro
    ports:
      - "80:80"         
    depends_on:
      - web
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O - http://127.0.0.1:80 >/dev/null 2>&1 || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s
    profiles:
      - reverse-app

  # --- Reverse Proxy (modo: Todo junto = App + DB + Proxy + Cache + Search) ---
  nginx_all:
    image: nginx:alpine
    container_name: web_application_nginx_all
    environment:
      # En “all” servimos la app que usa cache + search
      UPSTREAM: web_with_cache_search:4000
    volumes:
      - ./nginx/templates:/etc/nginx/templates:ro
    ports:
      - "80:80"           
    depends_on:
      - web_with_cache_search
      - redis
      - opensearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O - http://127.0.0.1:80 >/dev/null 2>&1 || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s
    profiles:
      - reverse-all

volumes:
  postgres_data:
  redis_data:
  opensearch_data:

networks:
  web_application_network:
    name: web_application_network
